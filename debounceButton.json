{
	"inputtext" : ["<NAME>", "<RESET>", "<CLOCK>", "<INPUT>", "<OUTPUT>", "<FREQ_HZ>", "<TIME_MS>"],
	"selects" : 
	[
    		{ "name" : "<EDGE_TYPE>", "options" : [ "rising_edge", "falling_edge"] },
        	{ "name" : "<RESET_TYPE>", "options" : [ "Synchronous", "Asynchronous"] }
	],
	"moduleName" : "Debounce Button",	
  	"moduleCode" : "-- VHDL Configurator\n-- Debounce Button\n\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity <NAME> is\n\nPort (\n\t<CLOCK> : in STD_LOGIC;\n\t<RESET>: in STD_LOGIC;\n\t<INPUT>: in STD_LOGIC;\n\t<OUTPUT> : out STD_LOGIC := '0'\n);\n\nend <NAME>;\n\narchitecture Behavioral of <NAME> is\n\n\tsignal cont : integer range 0 to (((<FREQ_HZ>\/1000)*<TIME_MS>)-1);\n\tsignal internal_sig : std_logic := '0';\n\nbegin\n\n\tprocess(<CLOCK>)\n\tbegin\n\t\tif <EDGE_TYPE>(<CLOCK>) then\n\t\t\tif <RESET> = '1' then\n\t\t\t\tcont <= 0;\n\t\t\t\tinternal_sig <= <INPUT>;\n\t\t\telse\n\t\t\t\tif cont = (((<FREQ_HZ>\/1000)*<TIME_MS>)-1) then\n\t\t\t\t\tcont <= 0;\n\t\t\t\t\tinternal_sig <= <INPUT>;\n\t\t\t\telse\n\t\t\t\t\tif <INPUT> \/= internal_sig then\n\t\t\t\t\t\tcont <= cont + 1;\n\t\t\t\t\telse\n\t\t\t\t\t\tcont <= 0;\n\t\t\t\t\tend if;\n\t\t\t\tend if;\n\t\t\tend if;\n\t\tend if;\n\n\tend process;\n\n<OUTPUT> <= internal_sig;\n\nend Behavioral;",
  	"moduleCode2" : "-- VHDL Configurator\n-- Debounce Button\n\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity <NAME> is\n\nPort (\n\t<CLOCK> : in STD_LOGIC;\n\t<RESET>: in STD_LOGIC;\n\t<INPUT>: in STD_LOGIC;\n\t<OUTPUT> : out STD_LOGIC := '0'\n);\n\nend <NAME>;\n\narchitecture Behavioral of <NAME> is\n\n\tsignal cont : integer range 0 to (((<FREQ_HZ>\/1000)*<TIME_MS>)-1);\n\tsignal internal_sig : std_logic := '0';\n\nbegin\n\n\tprocess(<CLOCK>,<RESET>)\n\tbegin\n\t\tif <RESET> = '1' then\n\t\t\tcont <= 0;\n\t\t\tinternal_sig <= <INPUT>;\n\t\telse\n\t\t\tif <EDGE_TYPE>(<CLOCK>) then\n\t\t\t\tif cont = (((<FREQ_HZ>\/1000)*<TIME_MS>)-1) then\n\t\t\t\t\tcont <= 0;\n\t\t\t\t\tinternal_sig <= <INPUT>;\n\t\t\t\telse\n\t\t\t\t\tif <INPUT> \/= internal_sig then\n\t\t\t\t\t\tcont <= cont + 1;\n\t\t\t\t\telse\n\t\t\t\t\t\tcont <= 0;\n\t\t\t\t\tend if;\n\t\t\t\tend if;\n\t\t\tend if;\n\t\tend if;\n\n\tend process;\n\n<OUTPUT> <= internal_sig;\n\nend Behavioral;"
}
